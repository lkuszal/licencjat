"""bunch of frequently used objects to import into another modules"""
alph_EN = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

PL_freq = [0.10011, 0.015, 0.04437, 0.03292, 0.09095, 0.00293, 0.01365, 0.0107, 0.08368, 0.02367, 0.03399, 0.03984,
           0.02963, 0.05671, 0.08448, 0.03078, 2e-05, 0.04497, 0.04946, 0.03937, 0.02296, 0.00027, 0.04507, 0.00018,
           0.03836, 0.06591]

thresholds_full = {
    100: [0.025255487494871796, 0.016705498773993806, 0.023306535070422536, 0.07002060631578949, 0.04203449361834321,
          0.054891671942148765, 0.07491378935185183, 0.039456134222222224, 0.06767395018055555, 0.27797674871428574,
          0.09332589425, 0.07766539886363637],
    200: [0.01897308559010989, 0.012418689136005995, 0.016366453333333333, 0.05438833750114416, 0.03373667572332506,
          0.042185630662337666, 0.057051707043209866, 0.03243298480952381, 0.050629782517857144, 0.2595803267142857,
          0.09304204284999999, 0.0775518925],
    300: [0.01603941704065934, 0.01040467225531915, 0.01374402047393365, 0.04725389430899828, 0.029065076166666665,
          0.038004606870129874, 0.04831115227777779, 0.027923966066666663, 0.043818143834677414, 0.2595803267142857,
          0.09202902275, 0.07754501340909091],
    400: [0.014137795516166887, 0.008963402100575247, 0.012038656229607252, 0.042940798130867715, 0.026160922353146845,
          0.033763569066985646, 0.04235459382098766, 0.02516277242222222, 0.03908526152393616, 0.2595803267142857,
          0.09051103525000001, 0.07737647368181819],
    500: [0.012999524212820513, 0.008054843326513217, 0.010572794096908937, 0.03966839433918128, 0.023998339726857883,
          0.029938463279942276, 0.03899351412962963, 0.023195204466666668, 0.033942728374999995, 0.2572981244285714,
          0.08983637405000001, 0.07614510231818182],
    750: [0.010994173389209216, 0.006914477490722463, 0.008792930143369177, 0.03550379822357547, 0.02105986608316896,
          0.0263708003313783, 0.0334131519619883, 0.01932550422962963, 0.028989030841216217, 0.20349367385714287,
          0.08217033135000001, 0.06578240668181817],
    1000: [0.010256739782178689, 0.006294076992327365, 0.008430796496872209, 0.033498079032411546, 0.01942044049624765,
           0.024801185363636367, 0.030837047775290213, 0.018334001178761064, 0.026356286023514856, 0.17445594153968255,
           0.07170691315000001, 0.06017927968181818]
}
thresholds_suppressed = {
    100: [0.023711712548595852, 0.015380634944193061, 0.02003437686868687],
    200: [0.017788349431934733, 0.011377657060312733, 0.014325110289855073],
    300: [0.015307891095703395, 0.009543781289099527, 0.011898721674208147],
    400: [0.013693534094066682, 0.008540244010695188, 0.01050851325029656],
    500: [0.012584447989592759, 0.0077749004322047125, 0.009494192415458937],
    750: [0.010926223853846156, 0.00665348067328943, 0.008195588045662101],
    1000: [0.010108817536058377, 0.0059362896532671105, 0.007397472289855072]
}

from pickle import load
model = load(open("pl_model.p", "rb"))


from random import choices
def word_generator(length):
    return "".join(choices(alph_EN, k=length))


from unidecode import unidecode
def normalise(text):
    return unidecode(text)


def suppress(text):
    temp_text = ""
    for char in text.upper():
        a = ord(char)
        if 64 < a < 91:
            temp_text += char
    return temp_text


from linecache import getline
from random import randrange
def random_text(length, file="output_lines.txt", file_length=39568):
    """returns random fragment of given lenght from file"""
    a = randrange(file_length - length // 10)
    text = ''
    while len(text) < length:
        text += getline(file, a)
        a += 1
    return text[:length]


if __name__ == "__main__":
    pass
